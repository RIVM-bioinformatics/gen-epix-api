name: Static Analysis and testing

on:
  pull_request:
    branches:
      - dev
      - test
      - main
    types: [opened, synchronize, reopened, edited]

concurrency:
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  setup-env:
    name: Setup and cache environment
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for marocchino/sticky-pull-request-comment to create or update PR comment
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12
    - name: Install ODBC development headers
      run: |
        sudo apt-get update
        sudo apt-get install -y unixodbc-dev
    - name: Cache pip dependencies
      id: cache-pip
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Install dependencies
      run: |
        
        if [[ ! -f ~/.venv/bin/activate ]]; then # Somehow there is sometimes a cached venv already at the start of the workflow
          echo "Creating virtual environment"
          python -m venv ~/.venv
        else
          echo "Using cached virtual environment"
        fi
        source ~/.venv/bin/activate
        pip install -r requirements.txt
        pip install -r dev-requirements.txt
        pip install --no-binary :all: pyodbc==5.2.*
      # pyodbc is CPU architecture dependent and needs to be installed from source

    
  formatting:
    name: Formatting
    permissions:
      contents: read
      pull-requests: write
    needs: setup-env
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Restore pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Check imports and formatting
      run: |
        source ~/.venv/bin/activate
        isort --check-only --diff --profile black .
        black --check --diff .
    - name: Comment PR in case of failure
      if: github.event_name == 'pull_request' && failure()
      uses: marocchino/sticky-pull-request-comment@v2.8.0
      with:
        header: "Code formatting"
        message: "Please format your code with [isort](https://pycqa.github.io/isort/) and [black](https://black.readthedocs.io): \
          `isort --check-only --diff --profile black . && black --check --diff .`."
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Linting:
    name: Linting
    permissions:
      contents: read
      pull-requests: write
    needs: setup-env
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Restore pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Run pylint
      run: | # pylint needs a __init__.py file in each directory, so all directories are linted separately
        source ~/.venv/bin/activate
        pylint --fail-under=9  ./gen_epix
    - name: Comment PR in case of failure
      if: github.event_name == 'pull_request' && failure()
      uses: marocchino/sticky-pull-request-comment@v2.8.0
      with:
        header: "Code linting"
        message: "Please lint your code with [pylint](https://pylint.pycqa.org/): \
          `pylint --fail-under=9 ./gen_epix`."
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  Type-checking:
    name: Type-checking
    permissions:
      contents: read
      pull-requests: write
    needs: setup-env
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Restore pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Run mypy
      run: |
        source ~/.venv/bin/activate
        mypy --disallow-untyped-defs --disallow-untyped-calls --disallow-incomplete-defs --ignore-missing-imports --disallow-untyped-decorators --strict-equality \
        --warn-redundant-casts --warn-unused-ignores --warn-return-any --warn-unreachable ./
    - name: Comment PR in case of failure
      if: github.event_name == 'pull_request' && failure()
      uses: marocchino/sticky-pull-request-comment@v2.8.0
      with:
        header: "Code linting"
        message: "Please type check your code with [mypy](https://www.mypy-lang.org/): \
          `mypy --disallow-untyped-defs --disallow-untyped-calls --disallow-incomplete-defs \
            --ignore-missing-imports --disallow-untyped-decorators --strict-equality \
            --warn-redundant-casts --warn-unused-ignores --warn-return-any --warn-unreachable ./ `."
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-tests:
    name: Run Tests
    needs: setup-env
    runs-on: ubuntu-latest
    env:
      CASEDB_IDPS_CONFIG_FILE: ${{ github.workspace }}/gen_epix/casedb/config/idp/no_identity_providers.json
      CASEDB_SECRETS_DIR: ${{ github.workspace }}/gen_epix/casedb/config/.secret
    steps:
    - uses: actions/checkout@v4
    - name: Restore pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
    - name: Run tests
      run: |
        source ~/.venv/bin/activate
        python run.py test_all
    - name: Upload coverage report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: test/data/output/coverage.xml

  sonarcloud:
    name: SonarCloud Scan
    needs: run-tests
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for SonarCloud analysis
    - name: Download coverage report
      uses: actions/download-artifact@v4
      with:
        name: coverage-report
        path: test/data/output/
    - name: SonarCloud Scan
      if: always()
      uses: sonarsource/sonarcloud-github-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # needed to get PR info
